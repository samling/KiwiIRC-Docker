{
  "name": "po2json",
  "description": "Convert PO files to JSON",
  "version": "0.2.3",
  "homepage": "https://github.com/mikeedwards/po2json",
  "author": {
    "name": "Joshua I. Miller",
    "email": "unrtst@cpan.org"
  },
  "contributors": [
    {
      "name": "Zach Carter",
      "email": "zcarter@cse.usf.edu"
    },
    {
      "name": "Daniel Roberts",
      "email": "danielrobertsdesign@gmail.com"
    },
    {
      "name": "Mike Edwards",
      "email": "michael.edwards@huffingtonpost.com"
    },
    {
      "name": "Illimar Tambek",
      "email": "illimar@sliptree.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/mikeedwards/po2json.git"
  },
  "bugs": {
    "url": "https://github.com/mikeedwards/po2json/issues"
  },
  "licenses": [
    {
      "type": "GNU Library General Public License",
      "url": "http://www.gnu.org/licenses/old-licenses/lgpl-2.0.html"
    }
  ],
  "bin": {
    "po2json": "bin/po2json"
  },
  "main": "./lib/po2json",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "nodeunit test/"
  },
  "devDependencies": {
    "nodeunit": "*",
    "jed": "~0.5.4"
  },
  "keywords": [
    "i18n",
    "l10n",
    "gettext",
    "po"
  ],
  "dependencies": {
    "lodash": "~2.4.1",
    "gettext-parser": "~0.2.0"
  },
  "readme": "# po2json <sup>[![Version Badge](http://vb.teelaun.ch/mikeedwards/po2json.svg)](https://npmjs.org/package/po2json)</sup>\n\n[![Build Status](https://secure.travis-ci.org/mikeedwards/po2json.png?branch=master)](http://travis-ci.org/mikeedwards/po2json)\n[![Dependency Status](https://david-dm.org/mikeedwards/po2json.png?theme=shields.io)](https://david-dm.org/mikeedwards/po2json)\n[![devDependency Status](https://david-dm.org/mikeedwards/po2json/dev-status.png?theme=shields.io)](https://david-dm.org/mikeedwards/po2json#info=devDependencies)\n\n[![NPM](https://nodei.co/npm/po2json.png)](https://nodei.co/npm/po2json/)\n\nConvert PO files to Javascript objects or JSON strings. The result is Jed-compatible.\n\n## Getting Started\nInstall the module with: `npm install po2json`\n\n### As a library\n```javascript\nvar po2json = require('po2json');\n```\n\n### As an executable\n```\npo2json translation.po translation.json\n```\n\n## Documentation\n\n### Methods\n\npo2json has 3 methods, all of which take exactly the same options. The main function is `parse` which actually does the parsing to JSON. The 2 others - `parseFile` and `parseFileSync` are convinience functions to directly read PO data from a file and convert it to JSON.\n\nParse a PO buffer to JSON\n\n* `po2json.parse(buf[, options])`\n\t* `buf` - a _po_ file as a Buffer or an unicode string.\n\t* `options` - an optional object with the following possible parameters:\n\t\t* `fuzzy` Whether to include fuzzt translation in JSON or not. Should be either \t\t`true` or `false`. Defaults to `false`.\n\t\t* `stringify` If `true`, returns a JSON string. Otherwise returns a plain \t\tJavascript object. Defaults to `false`.\n\t\t* `pretty` If `true`, the resulting JSON string will be pretty-printed. Has no \t\teffect when `stringify` is `false`. Defaults to `false`\n    * `format` - either `raw` or `jed`. `raw` produces a \"raw\" JSON output, while `jed` produces an output that is 100% compatible with Jed. Defaults to `raw`\n    * `domain` - the domain the messages will be wrapped inside. Only has effect if `format: 'jed'`.\n\nParse a PO file to JSON\n\n* `po2json.parseFile(fileName[,options], cb)`\n\t* `fileName` - path to the po file\n\t* `options` - same as for `po2json.parse`\n\t* `cb` - a function that receives 2 arguments: `err` and `jsonData`\n\nParse a PO file to JSON (synchronous)\n\n* `po2json.parseFileSync(fileName[, options])`\n\t* `fileName` - path to the po file\n\t* `options` - same as for `po2json.parse`\n\n\n## Examples\n\n### Basic usage with PO data as a buffer/string\n```javascript\nvar po2json = require('po2json'),\n    fs = require('fs');\nfs.readFile('messages.po', function (err, buffer) {\n  var jsonData = po2json.parse(buffer);\n  // do something interesting ...\n});\n```\n\n### Parse a PO file directly - Asynchronous Usage\n```javascript\nvar po2json = require('po2json');\npo2json.parseFile('messages.po', function (err, jsonData) {\n    // do something interesting ...\n});\n```\n\n### Parse a PO file directly - Synchronous Usage\n```javascript\nvar po2json = require('po2json');\nvar jsonData = '';\ntry {\n    jsonData = po2json.parseFileSync('messages.po');\n    // do something interesting ...\n} catch (e) {}\n```\n\n### Parse a PO file to Jed format\n```javascript\nvar po2json = require('po2json'),\n    Jed = require('jed');\npo2json.parseFile('messages.po', { format: 'jed' }, function (err, jsonData) {\n    var i18n = new Jed( jsonData );\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt](https://github.com/gruntjs/grunt).\n\n## Release History\n\n0.2.3 / 2014-01-26\n==================\n\n * Raised minimum node version requirement to 0.8\n * Raised lodash version to ~2.4.1\n * Clean up documentations\n\n0.2.0 / 2013-11-08\n==================\n\n**NB! This release is NOT backwards-compatible!** It has the following **breaking changes**:\n\n * `po2json.parse_po` has been replaced with `po2json.parse`\n * `po2json.parse` has been replaced with `po2json.parseFile`\n * `po2json.parseSync` has been replaced with `po2json.parseFileSync`\n \nOther changes in this release:\n\n  * The library has been competely rewritten, it now uses the [gettext-parser](https://github.com/andris9/gettext-parser) module to parse PO files. (Illimar Tambek)\n  * Tests have been completely rewritten (Illimar Tambek)\n  * Fixed issue with double-escaping quotes (Illimar Tambek)\n  * Option to skip/include fuzzy translations (Illimar Tambek)\n\n0.0.7 / 2012-10-26 \n==================\n\n  * Fixed linting bugs and added a better fr.po fixture (Mike Edwards)\n  * Add tests for po2json.parse and po2json.parseSync (Dan MacTough)\n  * updated README.md with version history (Mike Edwards)\n  * updated history (Mike Edwards)\n\n0.0.6 / 2012-10-22 \n==================\n\n  * Add AUTHORS to identify contributors (Dan MacTough)\n  * Update README with revision history and basic examples (Dan MacTough)\n\n0.0.5 / 2012-10-19\n==================\n\n  * cut out fake README example from grunt boilerplate (Mike Edwards)\n  * fixed README.md markdown (Mike Edwards)\n  * fixes tests (Mike Edwards)\n  * added first test for parse_po (Mike Edwards)\n  * Added boilerplate using grunt init (Mike Edwards)\n  * Changed exports.parse to use node's convetional error-first callback style. Added exports.parseSync for synchronous parsing. (Dan MacTough)\n\n0.0.4 / 2012-09-18\n==================\n\n  * Properly escape linebreaks (Zach Carter)\n  * Update package.json (Mike Edwards)\n  * package.json: define main module (Asbjørn Sloth Tønnesen)\n\n0.0.2 / 2012-07-03\n==================\n\n  * fix package, fix pretty print return, remove debug logs (gilles)\n  * upped version (Mike Edwards)\n\n0.0.1 / 2012-06-06\n==================\n\n  * Added build status to README (Mike Edwards)\n  * Removed built=ints from the dependencies (Mike Edwards)\n  * Added a .travis file for continuous integration (Mike Edwards)\n  * Added usage note to README.md (Mike Edwards)\n  * First working script! (Mike Edwards)\n  * Added new git repo (Mike Edwards)\n  * initial commit (Mike Edwards)\n  * Initial commit (Mike Edwards)\n\n## License\nCopyright (c) 2012 Joshua I. Miller  \nLicensed under the GNU, Library, General, Public, License licenses.\n",
  "readmeFilename": "README.md",
  "_id": "po2json@0.2.3",
  "_from": "po2json@0.2.3"
}
